//
//  MainRootInteractor.swift
//  news-app
//
//  Created by minhnv1 on 01/03/2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

typealias MainRootInteractable = MainRootBusinessLogic & MainRootDataStore

protocol MainRootBusinessLogic {
    
    func doRequest(_ request: MainRootModel.Request)
}

protocol MainRootDataStore {
    var dataSource: MainRootModel.DataSource { get }
}

final class MainRootInteractor: MainRootDataStore {
    
    var dataSource: MainRootModel.DataSource
    
    private var factory: MainRootInteractorFactorable.InteractableFactory
    private var presenter: MainRootPresentationLogic
    
    init(factory: MainRootInteractorFactorable.InteractableFactory, viewController: MainRootDisplayLogic?, dataSource: MainRootModel.DataSource) {
        self.factory = factory
        self.dataSource = dataSource
        self.presenter = factory.makePresenter(viewController: viewController)
    }
}


// MARK: - MainRootBusinessLogic
extension MainRootInteractor: MainRootBusinessLogic {
    
    func doRequest(_ request: MainRootModel.Request) {
        DispatchQueue.global(qos: .userInitiated).async {
            
            switch request {
                
            case .doSomething(let item):
                self.doSomething(item)
            }
        }
    }
}


// MARK: - Private Zone
private extension MainRootInteractor {
    
    func doSomething(_ item: Int) {
        
        //construct the Service right before using it
        //let serviceX = factory.makeXService()
        
        // get new data async or sync
        //let newData = serviceX.getNewData()
        
        presenter.presentResponse(.doSomething(newItem: item + 1, isItem: true))
    }
}
