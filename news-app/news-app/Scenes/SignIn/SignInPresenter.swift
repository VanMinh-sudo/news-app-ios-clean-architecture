//
//  SignInPresenter.swift
//  news-app
//
//  Created by minhnv1 on 01/03/2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation
import UIKit

protocol SignInPresentationLogic {
    func presentResponse(_ response: SignInModel.Response)
}

final class SignInPresenter {
    private weak var viewController: SignInDisplayLogic?

    init(viewController: SignInDisplayLogic?) {
        self.viewController = viewController
    }
}


// MARK: - SignInPresentationLogic
extension SignInPresenter: SignInPresentationLogic {

    func presentResponse(_ response: SignInModel.Response) {

        switch response {
        case .userNameHasData(let hasData):
            let viewModel = SignInModel.ViewModel.reloadUserNameTextField(hasData)
            viewController?.displayViewModel(viewModel)
        case .passwordHasData(let hasData):
            viewController?.displayViewModel(.reloadPasswordTextField(hasData))
        case .signInUpButtonShouldChangeState(let isEnable):
            viewController?.displayViewModel(.reloadSignInUpButtonState(isEnable))
        case .setupLocalizedCompleted(let screenType):
            setupLocalizedCompleted(screenType)
        case .setupForgotButtonStateCompleted(let screenType):
            viewController?.displayViewModel(.forgotPasswordState(screenType == .signIn))
        case .signUpResult(let result):
            switch result {
            case .success(_):
                viewController?.displayViewModel(.signUpSuccess)
            case .failure(let error as CommonError):
                viewController?.displayViewModel(.signUpFail(error.localizeErrorKey))
            default:
                break
            }
        }
    }

    private func setupLocalizedCompleted(_ screenType: SignInModel.DataSource.ScreenType) {
        let finalAttrString = NSMutableAttributedString()
        let prefixKey = screenType == .signIn ? "authen_dontHaveAccount" : "authen_termAndConditions_pre"
        let prefix = NSAttributedString.init(string: localized(key: prefixKey) ?? "")
        let postfixKey = screenType == .signIn ? "authen_register" : "authen_TandC"
        let postfix = NSAttributedString.init(string: localized(key: postfixKey) ?? "", attributes: [.font: UIFont.boldSystemFont(ofSize: 17)])
        finalAttrString.append(prefix)
        finalAttrString.append(NSAttributedString.init(string: " "))
        finalAttrString.append(postfix)
        var model = SignInModel.DataSource.LocalizedString()
        model.bottomTextAttributedString = finalAttrString
        model.emailText = localized(key: "authen_email")
        model.passwordText = localized(key: "authen_password")
        model.loginUpButtonTitle = screenType == .signIn ? localized(key: "authen_signIn") : localized(key: "authen_signUp")
        model.forgotPasswordText = localized(key: "authen_forgotPassword")
        model.orSignInText = localized(key: "authen_orSignInWith")
        viewController?.displayViewModel(.localizedStrings(model))
    }
}
