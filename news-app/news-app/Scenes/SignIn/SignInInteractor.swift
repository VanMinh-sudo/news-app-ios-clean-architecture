//
//  SignInInteractor.swift
//  news-app
//
//  Created by minhnv1 on 01/03/2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

typealias SignInInteractable = SignInBusinessLogic & SignInDataStore

protocol SignInBusinessLogic {

    func doRequest(_ request: SignInModel.Request)
}

protocol SignInDataStore {
    var dataSource: SignInModel.DataSource { get }
}

final class SignInInteractor: SignInDataStore {

    var dataSource: SignInModel.DataSource

    private var factory: SignInInteractorFactorable.InteractableFactory
    private var presenter: SignInPresentationLogic
    private var passwordValidatorService: PasswordValidatorServicable
    private var emailValidatorService: EmailValidatorServiceable
    private var signUpService: SignUpServiceable
    private var signInService: SignInServiceable

    init(factory: SignInInteractorFactorable.InteractableFactory, viewController: SignInDisplayLogic?, dataSource: SignInModel.DataSource) {
        self.factory = factory
        self.dataSource = dataSource
        self.presenter = factory.makePresenter(viewController: viewController)
        self.passwordValidatorService = factory.makePasswordValidatorService()
        self.emailValidatorService = factory.makeEmailValidatorService()
        self.signUpService = factory.makeSignUpService()
        self.signInService = factory.makeSignInService()
    }
}

extension SignInInteractor: SignInBusinessLogic {
    func doRequest(_ request: SignInModel.Request) {
        DispatchQueue.global(qos: .userInitiated).async { [weak self] in
            guard let self = self else {return}
            switch request {
            case .userNameDidChange(let userName):
                dataSource.userName = userName
                self.presenter.presentResponse(SignInModel.Response.userNameHasData(isNotEmpty(userName)))
                self.presenter.presentResponse(.signInUpButtonShouldChangeState(isEnableSignInUpButton()))
            case .passwordDidChange(let password):
                dataSource.password = password
                self.presenter.presentResponse(.passwordHasData(isNotEmpty(password)))
                self.presenter.presentResponse(.signInUpButtonShouldChangeState(isEnableSignInUpButton()))
            case .setupLocalized:
                self.presenter.presentResponse(.setupLocalizedCompleted(dataSource.screenType))
            case .setupForgotButtonState:
                self.presenter.presentResponse(.setupForgotButtonStateCompleted(dataSource.screenType))
            case .setupSignInUpButtonInitialState:
                self.presenter.presentResponse(.signInUpButtonShouldChangeState(false))
            case .signInOrSignUp:
                Task {
                    if self.dataSource.screenType == .signUp {
                        let result = await self.signUpService.signUp(email: self.dataSource.userName!, password: self.dataSource.password!)
                        self.presenter.presentResponse(.signUpResult(result))
                    } else {
                        let result = await self.signInService.signIn(email: self.dataSource.userName!, password: self.dataSource.password!)
                        self.presenter.presentResponse(.signInResult(result))
                    }
                }
            case .changeScreenType(let screenType):
                dataSource.screenType = screenType
                self.presenter.presentResponse(.setupLocalizedCompleted(screenType))
                self.presenter.presentResponse(.setupForgotButtonStateCompleted(screenType))
                self.presenter.presentResponse(.screenTypeDidChange(screenType))
            }
        }
    }

    private func isEnableSignInUpButton() -> Bool {
        return emailValidatorService.isValidEmail(email: dataSource.userName) && passwordValidatorService.isValid(dataSource.password)
    }
}
