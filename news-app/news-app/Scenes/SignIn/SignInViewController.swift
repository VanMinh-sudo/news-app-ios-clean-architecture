//
//  SignInViewController.swift
//  news-app
//
//  Created by minhnv1 on 01/03/2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import UIKit
import SwiftUI

protocol SignInDisplayLogic where Self: UIViewController {

    func displayViewModel(_ viewModel: SignInModel.ViewModel)
}

final class SignInViewController: UIViewController {

    typealias SignInFactory = SignInInteractorFactorable & SignInRouterFactorable

    private let mainView: SignInView
    private var interactor: SignInInteractable!
    private var router: SignInRouting!

    required init(factory: SignInFactory, mainView: SignInView, dataSource: SignInModel.DataSource) {
        self.mainView = mainView

        super.init(nibName: nil, bundle: nil)

        let interactorFactory = factory as! SignInInteractorFactorable.InteractableFactory
        interactor = factory.makeInteractor(factory: interactorFactory, viewController: self, dataSource: dataSource)
        router = factory.makeRouter(viewController: self)
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        interactor.doRequest(.setupLocalized)
        interactor.doRequest(.setupForgotButtonState)
        interactor.doRequest(.setupSignInUpButtonInitialState)
    }

    override func loadView() {
        super.loadView()
        mainView.delegate = self
        view.addSubview(mainView)
        mainView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }

    @available(*, unavailable)
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented, You shouldn't initialize the ViewController using Storyboards")
    }
}

// MARK: - SignInDisplayLogic
extension SignInViewController: SignInDisplayLogic {

    func displayViewModel(_ viewModel: SignInModel.ViewModel) {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else {return}
            switch viewModel {
            case .reloadUserNameTextField(let hasData):
                mainView.userNameHasData.send(hasData)
            case .reloadPasswordTextField(let hasData):
                mainView.passwordHasData.send(hasData)
            case .reloadSignInUpButtonState(let isEnable):
                mainView.isEnableSignInUpButton.send(isEnable)
            case .localizedStrings(let localizedModel):
                mainView.setLocalization(localizedModel)
            case .forgotPasswordState(let isShow):
                mainView.passwordTextField.subLabel_2.isHidden = !isShow
            case .signUpSuccess(let message):
                self.showOKAlert(title: nil, message: message) { [weak self] in
                    guard let self = self else {return}
                    //navigate to list
                }
            case .signUpFail(let message):
                self.showOKAlert(title: nil, message: message)
            case .reloadConstraint:
                mainView.updateConstraintsIfNeeded()
            case .signInSuccess:
                print("sign in success")
                //navigate
            case .signInFail(let error):
                print(error.localizedDescription)
            case .emailButtonIsHidden(let isHidden):
                mainView.emailButton.isHidden = isHidden
            }
        }
    }
}


// MARK: - SignInViewDelegate
extension SignInViewController: SignInViewDelegate {

    func textFieldDidChange(_ textField: UITextField) {
        if textField.tag == SignInView.userNameTextFieldTag {
            interactor.doRequest(.userNameDidChange(textField.text))
        } else if textField.tag == SignInView.passwordTextFieldTag {
            interactor.doRequest(.passwordDidChange(textField.text))
        }
    }

    func onTapSignInUpButton() {
        interactor.doRequest(.signInOrSignUp)
    }
    
    func onTapEmailButton() {
        interactor.doRequest(.changeScreenType(.signIn))
    }

    func onTapForgotPasswordButton() {
        let vc = UIHostingController(rootView: ForgotPasswordView())
        self.navigationController?.pushViewController(vc, animated: true)
    }
}


// MARK: - Private Zone
private extension SignInViewController {

    func displayDoSomething(_ viewModel: NSObject) {
        print("Use the mainView to present the viewModel")
        //example of using router
        router.routeTo(.xScene(xData: 22))
    }
}
